
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000484  00000518  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  00000547  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000f23  00000000  00000000  00000597  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007c5  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004df  00000000  00000000  00001c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b8  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000022e  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000042d  00000000  00000000  00002446  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00002873  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000468  00000468  000004fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.SetupUART 00000018  00000434  00000434  000004c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.UART_Transmit 0000000e  0000044c  0000044c  000004e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_Read 0000000e  0000045a  0000045a  000004ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Read_DHT11 0000015a  000000c8  000000c8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.send_string 0000002c  00000408  00000408  0000049c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ConvertToChar 00000158  00000222  00000222  000002b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000008e  0000037a  0000037a  0000040e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .data.error_String 0000000f  00800100  0000046c  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.Bitmask 00000001  0080010f  0000047b  0000050f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data.temp_low_last 00000001  00800110  0000047c  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data.temp_low_first 00000001  00800111  0000047d  00000511  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data.temp_high_last 00000001  00800112  0000047e  00000512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .data.temp_high_first 00000001  00800113  0000047f  00000513  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .data.humi_low_last 00000001  00800114  00000480  00000514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .data.humi_low_first 00000001  00800115  00000481  00000515  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 28 .data.humi_high_last 00000001  00800116  00000482  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 29 .data.humi_high_first 00000001  00800117  00000483  00000517  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .bss.temperature_low 00000001  00800118  00800118  00000518  2**0
                  ALLOC
 31 .bss.temperature_high 00000001  00800119  00800119  00000518  2**0
                  ALLOC
 32 .bss.humidity_low 00000001  0080011a  0080011a  00000518  2**0
                  ALLOC
 33 .bss.humidity_high 00000001  0080011b  0080011b  00000518  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
   8:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
   c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  10:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  14:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  18:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  1c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  20:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  24:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  28:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  2c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  30:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  34:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  38:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  3c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  40:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  44:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  48:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  4c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  50:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  54:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  58:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  5c:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  60:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>
  64:	0c 94 34 02 	jmp	0x468	; 0x468 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 18       	sub	r0, r1
  6c:	00 04       	cpc	r0, r0
  6e:	6c 01       	movw	r12, r24
  70:	18 01       	movw	r2, r16
  72:	1c 80       	ldd	r1, Y+4	; 0x04

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000468 <__bad_interrupt>:
 468:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SetupUART:

00000434 <SetupUART>:
unsigned char error_String[]={"reading error!"};

void SetupUART()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 434:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 438:	87 e6       	ldi	r24, 0x67	; 103
 43a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 43e:	86 e0       	ldi	r24, 0x06	; 6
 440:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 444:	88 e1       	ldi	r24, 0x18	; 24
 446:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 44a:	08 95       	ret

Disassembly of section .text.UART_Transmit:

0000044c <UART_Transmit>:
}

void UART_Transmit( int8_t data )
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 44c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 450:	95 ff       	sbrs	r25, 5
 452:	fc cf       	rjmp	.-8      	; 0x44c <UART_Transmit>
	UDR0 = data;
 454:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 458:	08 95       	ret

Disassembly of section .text.UART_Read:

0000045a <UART_Read>:
}

unsigned char UART_Read()
{
	while ( !(UCSR0A & (1<<RXC0)) ); /* Wait for data to be received */
 45a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 45e:	88 23       	and	r24, r24
 460:	e4 f7       	brge	.-8      	; 0x45a <UART_Read>
	return UDR0;
 462:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 466:	08 95       	ret

Disassembly of section .text.Read_DHT11:

000000c8 <Read_DHT11>:

int8_t Read_DHT11()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <Read_DHT11+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <Read_DHT11+0x8>
  d0:	1f 92       	push	r1
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
  d6:	fe 01       	movw	r30, r28
  d8:	31 96       	adiw	r30, 0x01	; 1
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	df 01       	movw	r26, r30
  de:	1d 92       	st	X+, r1
  e0:	8a 95       	dec	r24
  e2:	e9 f7       	brne	.-6      	; 0xde <Read_DHT11+0x16>

	//prepare correct port and pin of DHT sensor
	DHT_DDR |= (1 << DHT_INPUTPIN); //output
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	84 b9       	out	0x04, r24	; 4
	DHT_PORT |= (1 << DHT_INPUTPIN); //high
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	bf ef       	ldi	r27, 0xFF	; 255
  f2:	21 ee       	ldi	r18, 0xE1	; 225
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	b1 50       	subi	r27, 0x01	; 1
  f8:	20 40       	sbci	r18, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <Read_DHT11+0x2e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <Read_DHT11+0x38>
 100:	00 00       	nop
	_delay_ms(100);

	//begin send request
	DHT_PORT &= ~(1 << DHT_INPUTPIN); //low
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8f 7d       	andi	r24, 0xDF	; 223
 106:	85 b9       	out	0x05, r24	; 5
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	a0 ee       	ldi	r26, 0xE0	; 224
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	91 50       	subi	r25, 0x01	; 1
 110:	a0 40       	sbci	r26, 0x00	; 0
 112:	b0 40       	sbci	r27, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <Read_DHT11+0x46>
 116:	00 c0       	rjmp	.+0      	; 0x118 <Read_DHT11+0x50>
 118:	00 00       	nop
	_delay_ms(18);
	DHT_PORT |= (1 << DHT_INPUTPIN); //high
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	85 b9       	out	0x05, r24	; 5
	DHT_DDR &= ~(1 << DHT_INPUTPIN); //input
 120:	84 b1       	in	r24, 0x04	; 4
 122:	8f 7d       	andi	r24, 0xDF	; 223
 124:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	25 ed       	ldi	r18, 0xD5	; 213
 128:	2a 95       	dec	r18
 12a:	f1 f7       	brne	.-4      	; 0x128 <Read_DHT11+0x60>
 12c:	00 00       	nop
	_delay_us(40);

	//check first start condition
	if((DHT_PIN & (1<<DHT_INPUTPIN))) {
 12e:	1d 99       	sbic	0x03, 5	; 3
 130:	67 c0       	rjmp	.+206    	; 0x200 <Read_DHT11+0x138>
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <Read_DHT11+0x6e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <Read_DHT11+0x74>
 13c:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	
	//check second start condition
	if(!(DHT_PIN & (1<<DHT_INPUTPIN))) {
 13e:	1d 9b       	sbis	0x03, 5	; 3
 140:	61 c0       	rjmp	.+194    	; 0x204 <Read_DHT11+0x13c>
 142:	af e3       	ldi	r26, 0x3F	; 63
 144:	b1 e0       	ldi	r27, 0x01	; 1
 146:	11 97       	sbiw	r26, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <Read_DHT11+0x7e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <Read_DHT11+0x84>
 14c:	00 00       	nop
	}
	_delay_us(80);

	//read-in data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //for each byte (5 total)
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	31 c0       	rjmp	.+98     	; 0x1b4 <Read_DHT11+0xec>
		uint8_t result = 0;
		for(i=0; i<8; i++) {//for each bit in each byte (8 total)
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
				timeoutcounter++;
 152:	01 96       	adiw	r24, 0x01	; 1
				if(timeoutcounter > DHT_TIMEOUT) {
 154:	89 3c       	cpi	r24, 0xC9	; 201
 156:	91 05       	cpc	r25, r1
 158:	18 f0       	brcs	.+6      	; 0x160 <Read_DHT11+0x98>
 15a:	56 c0       	rjmp	.+172    	; 0x208 <Read_DHT11+0x140>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //for each byte (5 total)
		uint8_t result = 0;
		for(i=0; i<8; i++) {//for each bit in each byte (8 total)
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
 160:	1d 9b       	sbis	0x03, 5	; 3
 162:	f7 cf       	rjmp	.-18     	; 0x152 <Read_DHT11+0x8a>
 164:	b0 ea       	ldi	r27, 0xA0	; 160
 166:	ba 95       	dec	r27
 168:	f1 f7       	brne	.-4      	; 0x166 <Read_DHT11+0x9e>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1;
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<DHT_INPUTPIN))
 16a:	1d 9b       	sbis	0x03, 5	; 3
 16c:	0c c0       	rjmp	.+24     	; 0x186 <Read_DHT11+0xbe>
			result |= (1<<(7-i));
 16e:	47 e0       	ldi	r20, 0x07	; 7
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	42 1b       	sub	r20, r18
 174:	51 09       	sbc	r21, r1
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <Read_DHT11+0xb8>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	4a 95       	dec	r20
 182:	e2 f7       	brpl	.-8      	; 0x17c <Read_DHT11+0xb4>
 184:	38 2b       	or	r19, r24
			timeoutcounter = 0;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
			while(DHT_PIN & (1<<DHT_INPUTPIN)) {
 18a:	04 c0       	rjmp	.+8      	; 0x194 <Read_DHT11+0xcc>
				timeoutcounter++;
 18c:	01 96       	adiw	r24, 0x01	; 1
				if(timeoutcounter > DHT_TIMEOUT) {
 18e:	89 3c       	cpi	r24, 0xC9	; 201
 190:	91 05       	cpc	r25, r1
 192:	e0 f5       	brcc	.+120    	; 0x20c <Read_DHT11+0x144>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<DHT_INPUTPIN))
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<DHT_INPUTPIN)) {
 194:	1d 99       	sbic	0x03, 5	; 3
 196:	fa cf       	rjmp	.-12     	; 0x18c <Read_DHT11+0xc4>

	//read-in data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //for each byte (5 total)
		uint8_t result = 0;
		for(i=0; i<8; i++) {//for each bit in each byte (8 total)
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <Read_DHT11+0xd8>
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	28 30       	cpi	r18, 0x08	; 8
 1a2:	e0 f2       	brcs	.-72     	; 0x15c <Read_DHT11+0x94>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1;
				}
			}
		}
		bits[j] = result;
 1a4:	e1 e0       	ldi	r30, 0x01	; 1
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ec 0f       	add	r30, r28
 1aa:	fd 1f       	adc	r31, r29
 1ac:	e6 0f       	add	r30, r22
 1ae:	f1 1d       	adc	r31, r1
 1b0:	30 83       	st	Z, r19
	}
	_delay_us(80);

	//read-in data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //for each byte (5 total)
 1b2:	6f 5f       	subi	r22, 0xFF	; 255
 1b4:	65 30       	cpi	r22, 0x05	; 5
 1b6:	90 f3       	brcs	.-28     	; 0x19c <Read_DHT11+0xd4>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<DHT_INPUTPIN); //output
 1b8:	84 b1       	in	r24, 0x04	; 4
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	84 b9       	out	0x04, r24	; 4
	DHT_PORT |= (1<<DHT_INPUTPIN); //low
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	81 ee       	ldi	r24, 0xE1	; 225
 1c8:	94 e0       	ldi	r25, 0x04	; 4
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <Read_DHT11+0x102>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <Read_DHT11+0x10c>
 1d4:	00 00       	nop
	_delay_ms(100);

	//compare checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
 1d6:	29 81       	ldd	r18, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	4b 81       	ldd	r20, Y+3	; 0x03
 1dc:	3c 81       	ldd	r19, Y+4	; 0x04
 1de:	82 2f       	mov	r24, r18
 1e0:	89 0f       	add	r24, r25
 1e2:	84 0f       	add	r24, r20
 1e4:	83 0f       	add	r24, r19
 1e6:	5d 81       	ldd	r21, Y+5	; 0x05
 1e8:	85 13       	cpse	r24, r21
 1ea:	12 c0       	rjmp	.+36     	; 0x210 <Read_DHT11+0x148>
		//return temperature and humidity
		temperature_high = bits[2];
 1ec:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <temperature_high>
		temperature_low=bits[3];
 1f0:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <temperature_low>
		humidity_high = bits[0];
 1f4:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <humidity_high>
		humidity_low=bits[1];
 1f8:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <humidity_low>
		return 0;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	09 c0       	rjmp	.+18     	; 0x212 <Read_DHT11+0x14a>
	DHT_DDR &= ~(1 << DHT_INPUTPIN); //input
	_delay_us(40);

	//check first start condition
	if((DHT_PIN & (1<<DHT_INPUTPIN))) {
		return -1;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	07 c0       	rjmp	.+14     	; 0x212 <Read_DHT11+0x14a>
	}
	_delay_us(80);
	
	//check second start condition
	if(!(DHT_PIN & (1<<DHT_INPUTPIN))) {
		return -1;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	05 c0       	rjmp	.+10     	; 0x212 <Read_DHT11+0x14a>
		for(i=0; i<8; i++) {//for each bit in each byte (8 total)
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1;
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	03 c0       	rjmp	.+6      	; 0x212 <Read_DHT11+0x14a>
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<DHT_INPUTPIN)) {
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	01 c0       	rjmp	.+2      	; 0x212 <Read_DHT11+0x14a>
		humidity_high = bits[0];
		humidity_low=bits[1];
		return 0;
	}

	return -1;
 210:	8f ef       	ldi	r24, 0xFF	; 255
	
}
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

Disassembly of section .text.send_string:

00000408 <send_string>:

void send_string(char s[])
{
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	8c 01       	movw	r16, r24
	int i =0;
 412:	c0 e0       	ldi	r28, 0x00	; 0
 414:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (s[i] != 0x00)
 416:	03 c0       	rjmp	.+6      	; 0x41e <send_string+0x16>
	{
		UART_Transmit(s[i]);
 418:	0e 94 26 02 	call	0x44c	; 0x44c <UART_Transmit>
		i++;
 41c:	21 96       	adiw	r28, 0x01	; 1

void send_string(char s[])
{
	int i =0;
	
	while (s[i] != 0x00)
 41e:	f8 01       	movw	r30, r16
 420:	ec 0f       	add	r30, r28
 422:	fd 1f       	adc	r31, r29
 424:	80 81       	ld	r24, Z
 426:	81 11       	cpse	r24, r1
 428:	f7 cf       	rjmp	.-18     	; 0x418 <send_string+0x10>
	{
		UART_Transmit(s[i]);
		i++;
	}
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	08 95       	ret

Disassembly of section .text.ConvertToChar:

00000222 <ConvertToChar>:


void ConvertToChar()
{
	//8 bit decomposition e.g. humidity=37 (8 Bit, dec) 
	humi_high_last=humidity_high%10; //37%10= 7 and save as char
 222:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <humidity_high>
 226:	87 e6       	ldi	r24, 0x67	; 103
 228:	38 02       	muls	r19, r24
 22a:	91 2d       	mov	r25, r1
 22c:	11 24       	eor	r1, r1
 22e:	95 95       	asr	r25
 230:	95 95       	asr	r25
 232:	43 2f       	mov	r20, r19
 234:	44 0f       	add	r20, r20
 236:	44 0b       	sbc	r20, r20
 238:	e9 2f       	mov	r30, r25
 23a:	e4 1b       	sub	r30, r20
 23c:	ee 0f       	add	r30, r30
 23e:	2e 2f       	mov	r18, r30
 240:	22 0f       	add	r18, r18
 242:	22 0f       	add	r18, r18
 244:	e2 0f       	add	r30, r18
 246:	3e 1b       	sub	r19, r30
 248:	e3 2f       	mov	r30, r19
	humidity_high=humidity_high/10; //37/10=3 
 24a:	94 1b       	sub	r25, r20
 24c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <humidity_high>
	humi_high_first=humidity_high%10; //3%10=3
 250:	98 02       	muls	r25, r24
 252:	61 2d       	mov	r22, r1
 254:	11 24       	eor	r1, r1
 256:	65 95       	asr	r22
 258:	65 95       	asr	r22
 25a:	97 fd       	sbrc	r25, 7
 25c:	63 95       	inc	r22
 25e:	66 0f       	add	r22, r22
 260:	26 2f       	mov	r18, r22
 262:	22 0f       	add	r18, r18
 264:	22 0f       	add	r18, r18
 266:	62 0f       	add	r22, r18
 268:	96 1b       	sub	r25, r22
 26a:	69 2f       	mov	r22, r25
	//now for decimal points:
	humi_low_last=humidity_low%10; //37%10= 7 and save as char
 26c:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <humidity_low>
 270:	38 02       	muls	r19, r24
 272:	91 2d       	mov	r25, r1
 274:	11 24       	eor	r1, r1
 276:	95 95       	asr	r25
 278:	95 95       	asr	r25
 27a:	43 2f       	mov	r20, r19
 27c:	44 0f       	add	r20, r20
 27e:	44 0b       	sbc	r20, r20
 280:	79 2f       	mov	r23, r25
 282:	74 1b       	sub	r23, r20
 284:	77 0f       	add	r23, r23
 286:	27 2f       	mov	r18, r23
 288:	22 0f       	add	r18, r18
 28a:	22 0f       	add	r18, r18
 28c:	72 0f       	add	r23, r18
 28e:	37 1b       	sub	r19, r23
 290:	73 2f       	mov	r23, r19
	humidity_low=humidity_low/10; //37/10=3
 292:	94 1b       	sub	r25, r20
 294:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <humidity_low>
	humi_low_first=humidity_low%10; //3%10=3
 298:	98 02       	muls	r25, r24
 29a:	21 2d       	mov	r18, r1
 29c:	11 24       	eor	r1, r1
 29e:	25 95       	asr	r18
 2a0:	25 95       	asr	r18
 2a2:	97 fd       	sbrc	r25, 7
 2a4:	23 95       	inc	r18
 2a6:	22 0f       	add	r18, r18
 2a8:	32 2f       	mov	r19, r18
 2aa:	33 0f       	add	r19, r19
 2ac:	33 0f       	add	r19, r19
 2ae:	23 0f       	add	r18, r19
 2b0:	92 1b       	sub	r25, r18
 2b2:	29 2f       	mov	r18, r25
	
	//same for temperature:
	temp_high_last=temperature_high%10;
 2b4:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <temperature_high>
 2b8:	48 02       	muls	r20, r24
 2ba:	31 2d       	mov	r19, r1
 2bc:	11 24       	eor	r1, r1
 2be:	35 95       	asr	r19
 2c0:	35 95       	asr	r19
 2c2:	f4 2f       	mov	r31, r20
 2c4:	ff 0f       	add	r31, r31
 2c6:	ff 0b       	sbc	r31, r31
 2c8:	53 2f       	mov	r21, r19
 2ca:	5f 1b       	sub	r21, r31
 2cc:	55 0f       	add	r21, r21
 2ce:	95 2f       	mov	r25, r21
 2d0:	99 0f       	add	r25, r25
 2d2:	99 0f       	add	r25, r25
 2d4:	59 0f       	add	r21, r25
 2d6:	45 1b       	sub	r20, r21
 2d8:	54 2f       	mov	r21, r20
	temperature_high=temperature_high/10;
 2da:	3f 1b       	sub	r19, r31
 2dc:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <temperature_high>
	temp_high_first=temperature_high%10;
 2e0:	38 02       	muls	r19, r24
 2e2:	91 2d       	mov	r25, r1
 2e4:	11 24       	eor	r1, r1
 2e6:	95 95       	asr	r25
 2e8:	95 95       	asr	r25
 2ea:	37 fd       	sbrc	r19, 7
 2ec:	93 95       	inc	r25
 2ee:	99 0f       	add	r25, r25
 2f0:	49 2f       	mov	r20, r25
 2f2:	44 0f       	add	r20, r20
 2f4:	44 0f       	add	r20, r20
 2f6:	94 0f       	add	r25, r20
 2f8:	39 1b       	sub	r19, r25
 2fa:	93 2f       	mov	r25, r19
	//now for decimal points:
	temp_low_last=temperature_low%10;
 2fc:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <temperature_low>
 300:	a8 02       	muls	r26, r24
 302:	31 2d       	mov	r19, r1
 304:	11 24       	eor	r1, r1
 306:	35 95       	asr	r19
 308:	35 95       	asr	r19
 30a:	ba 2f       	mov	r27, r26
 30c:	bb 0f       	add	r27, r27
 30e:	bb 0b       	sbc	r27, r27
 310:	43 2f       	mov	r20, r19
 312:	4b 1b       	sub	r20, r27
 314:	44 0f       	add	r20, r20
 316:	f4 2f       	mov	r31, r20
 318:	ff 0f       	add	r31, r31
 31a:	ff 0f       	add	r31, r31
 31c:	4f 0f       	add	r20, r31
 31e:	a4 1b       	sub	r26, r20
 320:	4a 2f       	mov	r20, r26
	temperature_low=temperature_low/10;
 322:	3b 1b       	sub	r19, r27
 324:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <temperature_low>
	temp_low_first=temperature_low%10;
 328:	38 02       	muls	r19, r24
 32a:	81 2d       	mov	r24, r1
 32c:	11 24       	eor	r1, r1
 32e:	85 95       	asr	r24
 330:	85 95       	asr	r24
 332:	37 fd       	sbrc	r19, 7
 334:	83 95       	inc	r24
 336:	88 0f       	add	r24, r24
 338:	f8 2f       	mov	r31, r24
 33a:	ff 0f       	add	r31, r31
 33c:	ff 0f       	add	r31, r31
 33e:	8f 0f       	add	r24, r31
 340:	38 1b       	sub	r19, r24
 342:	83 2f       	mov	r24, r19
	
	//convert from dec to ASCII
	//for humi:
	//´high
	humi_high_last|=Bitmask;
 344:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <Bitmask>
 348:	e3 2b       	or	r30, r19
 34a:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <humi_high_last>
	humi_high_first|=Bitmask;
 34e:	63 2b       	or	r22, r19
 350:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <humi_high_first>
	//low:
	humi_low_last|=Bitmask;
 354:	73 2b       	or	r23, r19
 356:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <humi_low_last>
	humi_low_first|=Bitmask;
 35a:	23 2b       	or	r18, r19
 35c:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <humi_low_first>
	//for temp:
	//high
	temp_high_first|=Bitmask;
 360:	93 2b       	or	r25, r19
 362:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <temp_high_first>
	temp_high_last|=Bitmask;
 366:	53 2b       	or	r21, r19
 368:	50 93 12 01 	sts	0x0112, r21	; 0x800112 <temp_high_last>
	//low
	temp_low_last|=Bitmask;
 36c:	43 2b       	or	r20, r19
 36e:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <temp_low_last>
	temp_low_first|=Bitmask;
 372:	83 2b       	or	r24, r19
 374:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <temp_low_first>
 378:	08 95       	ret

Disassembly of section .text.main:

0000037a <main>:
}


int main(void)
{ 
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	27 97       	sbiw	r28, 0x07	; 7
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
	SetupUART();
 38e:	0e 94 1a 02 	call	0x434	; 0x434 <SetupUART>
    while(1) 
    {
		unsigned char cmd=UART_Read();
 392:	0e 94 2d 02 	call	0x45a	; 0x45a <UART_Read>
		switch(cmd)
 396:	85 35       	cpi	r24, 0x55	; 85
 398:	11 f0       	breq	.+4      	; 0x39e <main+0x24>
 39a:	85 37       	cpi	r24, 0x75	; 117
 39c:	d1 f7       	brne	.-12     	; 0x392 <main+0x18>
		{
			case 'U':
			case  'u':
			if(Read_DHT11()!=-1)
 39e:	0e 94 64 00 	call	0xc8	; 0xc8 <__data_load_end>
 3a2:	8f 3f       	cpi	r24, 0xFF	; 255
 3a4:	31 f1       	breq	.+76     	; 0x3f2 <main+0x78>
			{
				ConvertToChar();
 3a6:	0e 94 11 01 	call	0x222	; 0x222 <ConvertToChar>
				unsigned char humi[3]={humi_high_first, humi_high_last,'.',humi_low_first,humi_low_last};
 3aa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <humi_high_first>
 3ae:	8d 83       	std	Y+5, r24	; 0x05
 3b0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <humi_high_last>
 3b4:	8e 83       	std	Y+6, r24	; 0x06
 3b6:	8e e2       	ldi	r24, 0x2E	; 46
 3b8:	8f 83       	std	Y+7, r24	; 0x07
				unsigned char temp[4]={temp_high_first,temp_high_last,'.',temp_low_first,temp_low_last};
 3ba:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <temp_high_first>
 3be:	99 83       	std	Y+1, r25	; 0x01
 3c0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <temp_high_last>
 3c4:	9a 83       	std	Y+2, r25	; 0x02
 3c6:	8b 83       	std	Y+3, r24	; 0x03
 3c8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <temp_low_first>
 3cc:	8c 83       	std	Y+4, r24	; 0x04
				send_string(humi);
 3ce:	ce 01       	movw	r24, r28
 3d0:	05 96       	adiw	r24, 0x05	; 5
 3d2:	0e 94 04 02 	call	0x408	; 0x408 <send_string>
				UART_Transmit(';');
 3d6:	8b e3       	ldi	r24, 0x3B	; 59
 3d8:	0e 94 26 02 	call	0x44c	; 0x44c <UART_Transmit>
				send_string(temp);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 04 02 	call	0x408	; 0x408 <send_string>
				UART_Transmit('\n');
 3e4:	8a e0       	ldi	r24, 0x0A	; 10
 3e6:	0e 94 26 02 	call	0x44c	; 0x44c <UART_Transmit>
				UART_Transmit('\r');
 3ea:	8d e0       	ldi	r24, 0x0D	; 13
 3ec:	0e 94 26 02 	call	0x44c	; 0x44c <UART_Transmit>
 3f0:	d0 cf       	rjmp	.-96     	; 0x392 <main+0x18>
			}
			else
			{
				send_string(error_String);
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 04 02 	call	0x408	; 0x408 <send_string>
				UART_Transmit('\n');
 3fa:	8a e0       	ldi	r24, 0x0A	; 10
 3fc:	0e 94 26 02 	call	0x44c	; 0x44c <UART_Transmit>
				UART_Transmit('\r');		
 400:	8d e0       	ldi	r24, 0x0D	; 13
 402:	0e 94 26 02 	call	0x44c	; 0x44c <UART_Transmit>
 406:	c5 cf       	rjmp	.-118    	; 0x392 <main+0x18>
