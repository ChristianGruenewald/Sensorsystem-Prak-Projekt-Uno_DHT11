
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000032a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000359  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d12  00000000  00000000  00000391  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007a5  00000000  00000000  000010a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003e2  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000006c  00000000  00000000  00001c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000022e  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003ee  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000022b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002b2  000002b2  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.SetupUART 00000018  0000028c  0000028c  00000300  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.USART_Transmit 0000000e  000002a4  000002a4  00000318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.GetValues 0000018a  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000040  0000024c  0000024c  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.humidity_int 00000001  00800100  00800100  0000032a  2**0
                  ALLOC
 18 .bss.temperature_int 00000001  00800101  00800101  0000032a  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
   8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
   c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  10:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  14:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  18:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  1c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  20:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  24:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  28:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  2c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  30:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  34:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  38:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  3c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  40:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  44:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  48:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  4c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  50:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  54:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  58:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  5c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  60:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
  64:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  ba:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000002b2 <__bad_interrupt>:
 2b2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SetupUART:

0000028c <SetupUART>:
int8_t humidity_int = 0;

void SetupUART()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
 28c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 290:	87 e6       	ldi	r24, 0x67	; 103
 292:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 29c:	88 e1       	ldi	r24, 0x18	; 24
 29e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2a2:	08 95       	ret

Disassembly of section .text.USART_Transmit:

000002a4 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 2a4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2a8:	95 ff       	sbrs	r25, 5
 2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <USART_Transmit>
	UDR0 = data;
 2ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2b0:	08 95       	ret

Disassembly of section .text.GetValues:

000000c2 <GetValues>:
}

int8_t GetValues(int8_t *temperature, int8_t *humidity)
{
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	00 d0       	rcall	.+0      	; 0xca <GetValues+0x8>
  ca:	00 d0       	rcall	.+0      	; 0xcc <GetValues+0xa>
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	fc 01       	movw	r30, r24
	uint8_t bits[5];
	uint8_t i,j = 0;
	
	memset(bits, 0, sizeof(bits));
  d4:	9e 01       	movw	r18, r28
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	d9 01       	movw	r26, r18
  de:	1d 92       	st	X+, r1
  e0:	8a 95       	dec	r24
  e2:	e9 f7       	brne	.-6      	; 0xde <GetValues+0x1c>
	//init setup
	DHT_DDR |= (1 << DHT_INPUTPIN); //output
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	84 b9       	out	0x04, r24	; 4
	DHT_PORT |= (1 << DHT_INPUTPIN); //high
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	bf ef       	ldi	r27, 0xFF	; 255
  f2:	21 ee       	ldi	r18, 0xE1	; 225
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	b1 50       	subi	r27, 0x01	; 1
  f8:	20 40       	sbci	r18, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <GetValues+0x34>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <GetValues+0x3e>
 100:	00 00       	nop
	_delay_ms(100);
	
	//begin send request
	DHT_PORT &= ~(1 << DHT_INPUTPIN); //low
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	85 b9       	out	0x05, r24	; 5
 108:	9f ef       	ldi	r25, 0xFF	; 255
 10a:	a0 ee       	ldi	r26, 0xE0	; 224
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	91 50       	subi	r25, 0x01	; 1
 110:	a0 40       	sbci	r26, 0x00	; 0
 112:	b0 40       	sbci	r27, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <GetValues+0x4c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <GetValues+0x56>
 118:	00 00       	nop
	_delay_ms(18);
	DHT_PORT |= (1 << DHT_INPUTPIN); //high
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	85 b9       	out	0x05, r24	; 5
	DHT_DDR &= ~(1 << DHT_INPUTPIN); //input
 120:	94 b1       	in	r25, 0x04	; 4
 122:	9e 7f       	andi	r25, 0xFE	; 254
 124:	94 b9       	out	0x04, r25	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	25 ed       	ldi	r18, 0xD5	; 213
 128:	2a 95       	dec	r18
 12a:	f1 f7       	brne	.-4      	; 0x128 <GetValues+0x66>
 12c:	00 00       	nop
	_delay_us(40);
	
	//begin send request
	DHT_PORT &= ~(1 << DHT_INPUTPIN); //low
 12e:	95 b1       	in	r25, 0x05	; 5
 130:	9e 7f       	andi	r25, 0xFE	; 254
 132:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	90 ee       	ldi	r25, 0xE0	; 224
 138:	a0 e0       	ldi	r26, 0x00	; 0
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	a0 40       	sbci	r26, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <GetValues+0x78>
 142:	00 c0       	rjmp	.+0      	; 0x144 <GetValues+0x82>
 144:	00 00       	nop
	#if DHT_TYPE == DHT_DHT11
	_delay_ms(18);
	#elif DHT_TYPE == DHT_DHT22
	_delay_us(500);
	#endif
	DHT_PORT |= (1 << DHT_INPUTPIN); //high
 146:	95 b1       	in	r25, 0x05	; 5
 148:	91 60       	ori	r25, 0x01	; 1
 14a:	95 b9       	out	0x05, r25	; 5
	DHT_DDR &= ~(1 << DHT_INPUTPIN); //input
 14c:	94 b1       	in	r25, 0x04	; 4
 14e:	9e 7f       	andi	r25, 0xFE	; 254
 150:	94 b9       	out	0x04, r25	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	b5 ed       	ldi	r27, 0xD5	; 213
 154:	ba 95       	dec	r27
 156:	f1 f7       	brne	.-4      	; 0x154 <GetValues+0x92>
 158:	00 00       	nop
	_delay_us(40);

	//check first start condition
	if((DHT_PIN & (1<<DHT_INPUTPIN))) {
 15a:	18 99       	sbic	0x03, 0	; 3
 15c:	65 c0       	rjmp	.+202    	; 0x228 <GetValues+0x166>
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <GetValues+0xa0>
 166:	00 c0       	rjmp	.+0      	; 0x168 <GetValues+0xa6>
 168:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	
	//check second start condition
	if(!(DHT_PIN & (1<<DHT_INPUTPIN))) {
 16a:	18 9b       	sbis	0x03, 0	; 3
 16c:	5f c0       	rjmp	.+190    	; 0x22c <GetValues+0x16a>
 16e:	af e3       	ldi	r26, 0x3F	; 63
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	11 97       	sbiw	r26, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <GetValues+0xb0>
 176:	00 c0       	rjmp	.+0      	; 0x178 <GetValues+0xb6>
 178:	00 00       	nop
	}
	_delay_us(80);

	//read-in data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //for each byte (5 total)
 17a:	10 e0       	ldi	r17, 0x00	; 0
 17c:	34 c0       	rjmp	.+104    	; 0x1e6 <GetValues+0x124>
		uint8_t result = 0;
		for(i=0; i<8; i++) {//for each bit in each byte (8 total)
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
				timeoutcounter++;
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
				if(timeoutcounter > DHT_TIMEOUT) {
 182:	29 3c       	cpi	r18, 0xC9	; 201
 184:	31 05       	cpc	r19, r1
 186:	18 f0       	brcs	.+6      	; 0x18e <GetValues+0xcc>
 188:	53 c0       	rjmp	.+166    	; 0x230 <GetValues+0x16e>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //for each byte (5 total)
		uint8_t result = 0;
		for(i=0; i<8; i++) {//for each bit in each byte (8 total)
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
 18e:	18 9b       	sbis	0x03, 0	; 3
 190:	f6 cf       	rjmp	.-20     	; 0x17e <GetValues+0xbc>
 192:	b0 ea       	ldi	r27, 0xA0	; 160
 194:	ba 95       	dec	r27
 196:	f1 f7       	brne	.-4      	; 0x194 <GetValues+0xd2>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1;
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<DHT_INPUTPIN))
 198:	18 9b       	sbis	0x03, 0	; 3
 19a:	0c c0       	rjmp	.+24     	; 0x1b4 <GetValues+0xf2>
			result |= (1<<(7-i));
 19c:	47 e0       	ldi	r20, 0x07	; 7
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	49 1b       	sub	r20, r25
 1a2:	51 09       	sbc	r21, r1
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <GetValues+0xec>
 1aa:	22 0f       	add	r18, r18
 1ac:	33 1f       	adc	r19, r19
 1ae:	4a 95       	dec	r20
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <GetValues+0xe8>
 1b2:	82 2b       	or	r24, r18
			timeoutcounter = 0;
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
			while(DHT_PIN & (1<<DHT_INPUTPIN)) {
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <GetValues+0x102>
				timeoutcounter++;
 1ba:	2f 5f       	subi	r18, 0xFF	; 255
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
				if(timeoutcounter > DHT_TIMEOUT) {
 1be:	29 3c       	cpi	r18, 0xC9	; 201
 1c0:	31 05       	cpc	r19, r1
 1c2:	c0 f5       	brcc	.+112    	; 0x234 <GetValues+0x172>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<DHT_INPUTPIN))
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<DHT_INPUTPIN)) {
 1c4:	18 99       	sbic	0x03, 0	; 3
 1c6:	f9 cf       	rjmp	.-14     	; 0x1ba <GetValues+0xf8>

	//read-in data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //for each byte (5 total)
		uint8_t result = 0;
		for(i=0; i<8; i++) {//for each bit in each byte (8 total)
 1c8:	9f 5f       	subi	r25, 0xFF	; 255
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <GetValues+0x10e>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	98 30       	cpi	r25, 0x08	; 8
 1d2:	d8 f2       	brcs	.-74     	; 0x18a <GetValues+0xc8>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1;
				}
			}
		}
		bits[j] = result;
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	2c 0f       	add	r18, r28
 1da:	3d 1f       	adc	r19, r29
 1dc:	21 0f       	add	r18, r17
 1de:	31 1d       	adc	r19, r1
 1e0:	d9 01       	movw	r26, r18
 1e2:	8c 93       	st	X, r24
	}
	_delay_us(80);

	//read-in data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //for each byte (5 total)
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
 1e6:	15 30       	cpi	r17, 0x05	; 5
 1e8:	88 f3       	brcs	.-30     	; 0x1cc <GetValues+0x10a>
		}
		bits[j] = result;
	}

		//reset port
		DHT_DDR |= (1<<DHT_INPUTPIN); //output
 1ea:	84 b1       	in	r24, 0x04	; 4
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	84 b9       	out	0x04, r24	; 4
		DHT_PORT |= (1<<DHT_INPUTPIN); //low
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	bf ef       	ldi	r27, 0xFF	; 255
 1f8:	21 ee       	ldi	r18, 0xE1	; 225
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	b1 50       	subi	r27, 0x01	; 1
 1fe:	20 40       	sbci	r18, 0x00	; 0
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <GetValues+0x13a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <GetValues+0x144>
 206:	00 00       	nop
		_delay_ms(100);
		
			//compare checksum
			if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) 
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	3b 81       	ldd	r19, Y+3	; 0x03
 20e:	2c 81       	ldd	r18, Y+4	; 0x04
 210:	89 0f       	add	r24, r25
 212:	83 0f       	add	r24, r19
 214:	82 0f       	add	r24, r18
 216:	9d 81       	ldd	r25, Y+5	; 0x05
 218:	89 13       	cpse	r24, r25
 21a:	0e c0       	rjmp	.+28     	; 0x238 <GetValues+0x176>
			{
				*temperature = bits[2];
 21c:	30 83       	st	Z, r19
				*humidity = bits[0];
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	db 01       	movw	r26, r22
 222:	8c 93       	st	X, r24
				return 0;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	09 c0       	rjmp	.+18     	; 0x23a <GetValues+0x178>
	DHT_DDR &= ~(1 << DHT_INPUTPIN); //input
	_delay_us(40);

	//check first start condition
	if((DHT_PIN & (1<<DHT_INPUTPIN))) {
		return -1;
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	07 c0       	rjmp	.+14     	; 0x23a <GetValues+0x178>
	}
	_delay_us(80);
	
	//check second start condition
	if(!(DHT_PIN & (1<<DHT_INPUTPIN))) {
		return -1;
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	05 c0       	rjmp	.+10     	; 0x23a <GetValues+0x178>
		for(i=0; i<8; i++) {//for each bit in each byte (8 total)
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	03 c0       	rjmp	.+6      	; 0x23a <GetValues+0x178>
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<DHT_INPUTPIN)) {
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	01 c0       	rjmp	.+2      	; 0x23a <GetValues+0x178>
				*temperature = bits[2];
				*humidity = bits[0];
				return 0;
			}

			return -1;
 238:	8f ef       	ldi	r24, 0xFF	; 255
	
}
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	08 95       	ret

Disassembly of section .text.main:

0000024c <main>:



int main(void)
{ 
	SetupUART();
 24c:	0e 94 46 01 	call	0x28c	; 0x28c <SetupUART>
    while(1) 
    {
		if (GetValues(&temperature_int, &humidity_int) != -1) 
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	71 e0       	ldi	r23, 0x01	; 1
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
 25c:	8f 3f       	cpi	r24, 0xFF	; 255
 25e:	49 f0       	breq	.+18     	; 0x272 <main+0x26>
		{
			USART_Transmit(temperature_int);
 260:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temperature_int>
 264:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_Transmit>
			USART_Transmit(humidity_int);
 268:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 26c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_Transmit>
 270:	03 c0       	rjmp	.+6      	; 0x278 <main+0x2c>
		}
		else
		{
			USART_Transmit(0);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 52 01 	call	0x2a4	; 0x2a4 <USART_Transmit>
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	83 ed       	ldi	r24, 0xD3	; 211
 27c:	90 e3       	ldi	r25, 0x30	; 48
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x32>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x3c>
 288:	00 00       	nop
 28a:	e2 cf       	rjmp	.-60     	; 0x250 <main+0x4>
